pipeline {
    agent any
    
    environment {
        APP_NAME = 'aquaculture-ml-platform'
        BUILD_VERSION = "1.0.0-${BUILD_NUMBER}"
        GIT_COMMIT_SHORT = sh(script: "git rev-parse --short HEAD || echo 'unknown'", returnStdout: true).trim()
        GIT_BRANCH = sh(script: "git rev-parse --abbrev-ref HEAD || echo 'main'", returnStdout: true).trim()
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '10'))
        disableConcurrentBuilds()
        timeout(time: 90, unit: 'MINUTES')
        timestamps()
    }
    
    parameters {
        choice(
            name: 'DEPLOYMENT_ENVIRONMENT',
            choices: ['staging', 'production', 'both'],
            description: 'Target deployment environment'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: 'Skip test execution (emergency deployments only)'
        )
        booleanParam(
            name: 'ENABLE_SECURITY_SCAN',
            defaultValue: true,
            description: 'Enable security vulnerability scanning'
        )
        booleanParam(
            name: 'DEPLOY_TO_PRODUCTION',
            defaultValue: false,
            description: 'Deploy to production environment'
        )
    }
    
    stages {
        stage('Initialize Pipeline') {
            steps {
                script {
                    echo "Pipeline Initialization"
                    echo "======================="
                    echo "Application: ${APP_NAME}"
                    echo "Version: ${BUILD_VERSION}"
                    echo "Git Commit: ${GIT_COMMIT_SHORT}"
                    echo "Branch: ${GIT_BRANCH}"
                    echo "Build Number: ${BUILD_NUMBER}"
                    
                    // Set build display name
                    currentBuild.displayName = "#${BUILD_NUMBER} - v${BUILD_VERSION}"
                    currentBuild.description = "Branch: ${GIT_BRANCH} | Commit: ${GIT_COMMIT_SHORT}"
                }
            }
        }
        
        stage('Environment Check') {
            steps {
                script {
                    echo "Checking environment..."
                    sh 'pwd'
                    sh 'ls -la'
                    sh 'docker --version || echo "Docker not available"'
                    sh 'python3 --version || echo "Python3 not available"'
                    sh 'git --version || echo "Git not available"'
                }
            }
        }
        
        stage('Basic Tests') {
            when {
                not { expression { params.SKIP_TESTS } }
            }
            steps {
                script {
                    echo "Running basic tests..."
                    sh 'echo "Test: Application structure"'
                    sh 'test -f version.py && echo "✅ version.py found" || echo "❌ version.py missing"'
                    sh 'test -d services && echo "✅ services directory found" || echo "❌ services directory missing"'
                    sh 'test -f docker-compose.yml && echo "✅ docker-compose.yml found" || echo "❌ docker-compose.yml missing"'
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Build completed!"
                echo "Parameters used:"
                echo "- DEPLOYMENT_ENVIRONMENT: ${params.DEPLOYMENT_ENVIRONMENT}"
                echo "- SKIP_TESTS: ${params.SKIP_TESTS}"
                echo "- ENABLE_SECURITY_SCAN: ${params.ENABLE_SECURITY_SCAN}"
                echo "- DEPLOY_TO_PRODUCTION: ${params.DEPLOY_TO_PRODUCTION}"
            }
        }
        
        success {
            script {
                echo "✅ BUILD SUCCESSFUL"
                echo "Application: ${APP_NAME}"
                echo "Version: ${BUILD_VERSION}"
                echo "Branch: ${GIT_BRANCH}"
                echo "Build: #${BUILD_NUMBER}"
            }
        }
        
        failure {
            script {
                echo "❌ BUILD FAILED"
                echo "Application: ${APP_NAME}"
                echo "Build: #${BUILD_NUMBER}"
                echo "Check console output for details"
            }
        }
    }
}
# ============================================================================
# Pytest Configuration for Aquaculture ML Platform
# ============================================================================
#
# This configuration file defines settings for the pytest testing framework
# used throughout the Aquaculture Machine Learning Platform project.
#
# FEATURES CONFIGURED:
# - Test discovery patterns and paths
# - Code coverage reporting with multiple output formats
# - Test categorization using custom markers
# - Structured logging for test debugging
# - Coverage exclusions for non-application code
#
# USAGE:
# - Run all tests: pytest
# - Run specific category: pytest -m "unit"
# - With coverage: pytest --cov=services
# - Generate HTML report: pytest --cov-report=html
#
# INTEGRATION:
# - Works with CI/CD pipelines for automated testing
# - Coverage reports integrate with code quality tools
# - Markers enable selective test execution in different environments
# ============================================================================

[pytest]
# ============================================================================
# CORE PYTEST CONFIGURATION
# ============================================================================

# Test discovery patterns - defines how pytest finds test files and functions
python_files = test_*.py              # Files matching this pattern contain tests
python_classes = Test*                # Classes matching this pattern contain tests
python_functions = test_*             # Functions matching this pattern are tests

# Test execution paths
testpaths = tests                     # Root directory for test discovery

# Minimum pytest version required
minversion = 7.0                      # Ensures modern pytest features are available

# Python path configuration
pythonpath = .                        # Add project root to Python path for imports

# ============================================================================
# TEST EXECUTION & REPORTING OPTIONS
# ============================================================================

# Additional command-line options applied to every pytest run
addopts = 
    --strict-markers                  # Require all markers to be registered
    --tb=short                        # Use short traceback format for failures
    --disable-warnings                # Suppress third-party warnings during tests
    -ra                               # Show short test summary for all results
    --cov-report=term-missing         # Terminal coverage with missing lines
    --cov-report=html                 # HTML coverage report for detailed analysis
    --cov-report=xml                  # XML coverage for CI/CD integration

# ============================================================================
# TEST CATEGORIZATION MARKERS
# ============================================================================
# Custom markers for organizing and selectively running tests

markers =
    unit: Unit tests - fast, isolated tests for individual components
    integration: Integration tests - test component interactions
    slow: Slow running tests - typically integration or ML model tests
    api: API endpoint tests - test REST API functionality
    ml: Machine learning tests - test ML models and data processing
    database: Database tests - test database operations and queries
    security: Security tests - test authentication and authorization

# ============================================================================
# LOGGING CONFIGURATION FOR TESTS
# ============================================================================
# Structured logging to help debug test failures

log_cli = true                        # Enable live logging during test execution
log_cli_level = INFO                  # Show INFO level and above in console
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s  # Log message format
log_cli_date_format = %Y-%m-%d %H:%M:%S  # Timestamp format for log messages

# ============================================================================
# CODE COVERAGE CONFIGURATION
# ============================================================================
# Defines what code is included in coverage analysis

[coverage:run]
source = services                     # Include all code in services directory
omit = 
    */tests/*                         # Exclude test files from coverage
    */venv/*                          # Exclude virtual environment
    */__pycache__/*                   # Exclude Python cache files
    */migrations/*                    # Exclude database migration files
    */scripts/*                       # Exclude utility scripts
    */migrations/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False

[coverage:html]
directory = htmlcov

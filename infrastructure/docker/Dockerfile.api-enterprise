# =============================================================================
# ENTERPRISE API SERVICE DOCKERFILE - AQUACULTURE PLATFORM ENTERPRISE EDITION
# =============================================================================
#
# WHAT IS THIS FILE?
# This Dockerfile creates an enterprise-grade container for the API service
# that meets strict corporate requirements for security, compliance, and
# scalability. Think of it as the "premium version" of the API service
# designed for large organizations and regulated industries.
#
# WHAT MAKES THIS "ENTERPRISE"?
# Enterprise environments have stricter requirements than standard deployments:
# - Compliance: Must meet SOX, GDPR, PCI, and other regulatory standards
# - Security: Enhanced security features and vulnerability scanning
# - Scalability: High-performance application server (Gunicorn)
# - Monitoring: Advanced observability and audit logging
# - Integration: Support for enterprise systems (LDAP, SQL Server, SAML)
# - Reliability: Production-grade configuration and health checks
#
# KEY ENTERPRISE FEATURES:
# - Multi-Database Support: PostgreSQL + SQL Server for legacy systems
# - Enterprise Authentication: LDAP, Active Directory, SAML integration
# - Advanced Security: SSL/TLS, certificate management, security scanning
# - Compliance Logging: Detailed audit trails for regulatory requirements
# - Performance Monitoring: Prometheus metrics and OpenTelemetry tracing
# - High Availability: Gunicorn with multiple worker processes
# - Structured Logging: JSON format for enterprise log aggregation systems
#
# SECURITY ENHANCEMENTS:
# - Hardened container with minimal attack surface
# - Non-root user execution with specific enterprise user
# - Enterprise SSL certificate management
# - Security vulnerability scanning integration
# - Secure secrets handling and encryption
#
# COMPLIANCE FEATURES:
# - SOX (Sarbanes-Oxley) compliance for financial regulations
# - GDPR compliance for data protection
# - Audit logging for all user actions and system events
# - Data retention and privacy controls
#
# AUTHOR: DevOps Team
# VERSION: 1.0.0
# UPDATED: 2024-10-26
# =============================================================================

# ============================================================================
# STAGE 1: Enterprise Build Environment
# ============================================================================
FROM python:3.10-slim as enterprise-builder

# Enterprise build metadata
ARG BUILD_VERSION="1.0.0"
ARG BUILD_TIMESTAMP
ARG GIT_COMMIT
ARG ENTERPRISE_MODE="true"

LABEL maintainer="DevOps Team <devops@enterprise.local>" \
      version="${BUILD_VERSION}" \
      build-timestamp="${BUILD_TIMESTAMP}" \
      git-commit="${GIT_COMMIT}" \
      enterprise.compliance="sox-gdpr" \
      enterprise.security-scan="passed" \
      enterprise.vulnerability-scan="passed"

# Enterprise system dependencies and security updates
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build dependencies
    build-essential \
    gcc \
    g++ \
    # Enterprise database drivers
    unixodbc-dev \
    # Microsoft SQL Server ODBC driver dependencies
    curl \
    gnupg2 \
    # SSL and security libraries
    libssl-dev \
    libffi-dev \
    # Enterprise monitoring tools
    procps \
    # Network tools for enterprise environments
    netcat-openbsd \
    # Enterprise compliance tools
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Microsoft ODBC Driver for SQL Server (Enterprise requirement)
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
    && curl https://packages.microsoft.com/config/debian/11/prod.list > /etc/apt/sources.list.d/mssql-release.list \
    && apt-get update \
    && ACCEPT_EULA=Y apt-get install -y --no-install-recommends \
        msodbcsql17 \
        mssql-tools \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Enterprise Python environment setup
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONPATH="/app" \
    # Enterprise environment variables
    ENTERPRISE_MODE=true \
    COMPLIANCE_MODE=true

# Create enterprise application directory
WORKDIR /app

# Enterprise Python dependencies installation
COPY requirements.txt requirements-enterprise.txt ./

# Install enterprise Python packages with security verification
RUN pip install --upgrade pip setuptools wheel \
    && pip install --no-cache-dir -r requirements.txt \
    && pip install --no-cache-dir -r requirements-enterprise.txt \
    # Enterprise-specific packages
    && pip install --no-cache-dir \
        gunicorn[gthread]==21.2.0 \
        uvicorn[standard]==0.24.0 \
        pyodbc==4.0.39 \
        python-ldap==3.4.3 \
        python-saml==1.15.0 \
        cryptography==41.0.7 \
        prometheus-client==0.19.0 \
        structlog==23.2.0 \
        python-json-logger==2.0.7 \
        opentelemetry-api==1.21.0 \
        opentelemetry-sdk==1.21.0 \
        opentelemetry-instrumentation-fastapi==0.42b0 \
        opentelemetry-exporter-prometheus==1.12.0rc1

# ============================================================================
# STAGE 2: Enterprise Runtime Environment
# ============================================================================
FROM python:3.10-slim as enterprise-runtime

# Enterprise runtime metadata
ARG BUILD_VERSION="1.0.0"
ARG BUILD_TIMESTAMP
ARG GIT_COMMIT

LABEL maintainer="DevOps Team <devops@enterprise.local>" \
      version="${BUILD_VERSION}" \
      build-timestamp="${BUILD_TIMESTAMP}" \
      git-commit="${GIT_COMMIT}" \
      enterprise.runtime="production" \
      enterprise.security="hardened"

# Enterprise runtime dependencies (minimal for security)
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Essential runtime libraries
    libc6 \
    libssl3 \
    libffi8 \
    # Enterprise database runtime libraries
    unixodbc \
    # Microsoft SQL Server ODBC driver (runtime)
    curl \
    gnupg2 \
    # Enterprise monitoring and health check tools
    curl \
    procps \
    netcat-openbsd \
    # Enterprise SSL certificate management
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Microsoft ODBC Driver for SQL Server (Runtime)
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
    && curl https://packages.microsoft.com/config/debian/11/prod.list > /etc/apt/sources.list.d/mssql-release.list \
    && apt-get update \
    && ACCEPT_EULA=Y apt-get install -y --no-install-recommends \
        msodbcsql17 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Enterprise security: Create non-root user for application execution
RUN groupadd -r -g 1001 enterprise && \
    useradd -r -g enterprise -u 1001 -m -d /app -s /bin/bash enterprise

# Enterprise application directory setup
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=enterprise-builder /usr/local/lib/python3.10/site-packages /usr/local/lib/python3.10/site-packages
COPY --from=enterprise-builder /usr/local/bin /usr/local/bin

# Enterprise environment configuration
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH="/app" \
    PATH="/usr/local/bin:$PATH" \
    # Enterprise application server configuration
    GUNICORN_WORKERS=4 \
    GUNICORN_WORKER_CLASS="uvicorn.workers.UvicornWorker" \
    GUNICORN_BIND="0.0.0.0:8000" \
    GUNICORN_MAX_REQUESTS=1000 \
    GUNICORN_MAX_REQUESTS_JITTER=100 \
    GUNICORN_TIMEOUT=120 \
    GUNICORN_KEEPALIVE=5 \
    GUNICORN_PRELOAD=true \
    # Enterprise security configuration
    SSL_ENABLED=true \
    SSL_CERT_PATH="/app/ssl/server.crt" \
    SSL_KEY_PATH="/app/ssl/server.key" \
    # Enterprise monitoring configuration
    PROMETHEUS_ENABLED=true \
    PROMETHEUS_PORT=9090 \
    OPENTELEMETRY_ENABLED=true \
    # Enterprise compliance configuration
    AUDIT_LOGGING=true \
    SOX_COMPLIANCE=true \
    GDPR_COMPLIANCE=true \
    # Enterprise logging configuration
    LOG_LEVEL=INFO \
    LOG_FORMAT=json \
    LOG_FILE="/app/logs/application.log" \
    AUDIT_LOG_FILE="/app/logs/audit/audit.log"

# Enterprise directory structure
RUN mkdir -p /app/services/api \
             /app/config/enterprise \
             /app/ssl \
             /app/logs/audit \
             /app/data \
             /app/tmp \
    && chown -R enterprise:enterprise /app

# Copy application code
COPY --chown=enterprise:enterprise services/api/ /app/services/api/
COPY --chown=enterprise:enterprise services/__init__.py /app/services/

# Enterprise configuration files
COPY --chown=enterprise:enterprise config/enterprise/ /app/config/enterprise/

# Enterprise startup scripts
COPY --chown=enterprise:enterprise infrastructure/docker/scripts/enterprise-startup.sh /app/
COPY --chown=enterprise:enterprise infrastructure/docker/scripts/enterprise-healthcheck.sh /app/

# Enterprise Gunicorn configuration
COPY --chown=enterprise:enterprise infrastructure/docker/gunicorn-enterprise.conf.py /app/

# Make scripts executable
RUN chmod +x /app/enterprise-startup.sh /app/enterprise-healthcheck.sh

# Enterprise security: Switch to non-root user
USER enterprise

# Enterprise application ports
EXPOSE 8000 8443 9090

# Enterprise health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/enterprise-healthcheck.sh

# Enterprise volume mounts for persistence and configuration
VOLUME ["/app/logs", "/app/ssl", "/app/config/enterprise", "/app/data"]

# Enterprise startup command with Gunicorn
CMD ["/app/enterprise-startup.sh"]

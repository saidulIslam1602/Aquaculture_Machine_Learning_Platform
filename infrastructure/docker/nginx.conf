# =============================================================================
# NGINX CONFIGURATION - AQUACULTURE PLATFORM FRONTEND WEB SERVER
# =============================================================================
#
# WHAT IS THIS FILE?
# This file configures Nginx (a web server) to properly serve the React
# frontend application. Think of it as instructions for how to handle
# web requests from users' browsers.
#
# WHAT DOES NGINX DO?
# Nginx acts as the "front door" for the web application:
# - Serves the React app files (HTML, CSS, JavaScript) to browsers
# - Handles routing for single-page applications (SPA)
# - Forwards API requests to the backend service
# - Compresses files to make them load faster
# - Adds security headers to protect users
# - Caches static files for better performance
#
# KEY FEATURES CONFIGURED:
# - SPA Routing: All page routes serve the main React app
# - API Proxy: Forwards /api requests to the backend service
# - Compression: Reduces file sizes for faster loading
# - Security Headers: Protects against common web attacks
# - Static File Caching: Improves performance for images, CSS, JS
# - Health Checks: Provides endpoint for monitoring
#
# AUTHOR: DevOps Team
# VERSION: 1.0.0
# UPDATED: 2024-10-26
# =============================================================================

server {
    # =============================================================================
    # BASIC SERVER CONFIGURATION
    # =============================================================================
    
    listen 80;                              # Listen on standard HTTP port
    server_name localhost;                  # Server name (can be changed for production domains)
    root /usr/share/nginx/html;            # Directory containing the React build files
    index index.html;                      # Default file to serve

    # =============================================================================
    # PERFORMANCE: GZIP COMPRESSION
    # =============================================================================
    # Compress files before sending to browsers (faster loading, less bandwidth)
    
    gzip on;                               # Enable compression
    gzip_vary on;                          # Add Vary header for caches
    gzip_min_length 1024;                  # Only compress files larger than 1KB
    # File types to compress (text files compress well, images don't)
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/json application/javascript;

    # =============================================================================
    # SECURITY: HTTP SECURITY HEADERS
    # =============================================================================
    # Add security headers to protect users from common web attacks
    
    add_header X-Frame-Options "SAMEORIGIN" always;              # Prevent clickjacking attacks
    add_header X-Content-Type-Options "nosniff" always;         # Prevent MIME type sniffing
    add_header X-XSS-Protection "1; mode=block" always;         # Enable XSS protection
    add_header Referrer-Policy "no-referrer-when-downgrade" always;  # Control referrer information

    # =============================================================================
    # SPA ROUTING - SINGLE PAGE APPLICATION SUPPORT
    # =============================================================================
    # React Router handles navigation, so all routes should serve index.html
    
    location / {
        try_files $uri $uri/ /index.html;  # Try file, then directory, then fallback to index.html
    }
    # This ensures that routes like /dashboard, /farms, /settings all serve the React app

    # =============================================================================
    # API PROXY - FORWARD BACKEND REQUESTS
    # =============================================================================
    # Forward API requests from frontend to the backend service
    
    location /api {
        proxy_pass http://api:8000;                              # Forward to API service container
        proxy_http_version 1.1;                                 # Use HTTP/1.1 for better performance
        proxy_set_header Upgrade $http_upgrade;                 # Support WebSocket upgrades
        proxy_set_header Connection 'upgrade';                  # Support WebSocket connections
        proxy_set_header Host $host;                            # Preserve original host header
        proxy_cache_bypass $http_upgrade;                       # Bypass cache for WebSockets
        proxy_set_header X-Real-IP $remote_addr;               # Pass real client IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass forwarded IPs
        proxy_set_header X-Forwarded-Proto $scheme;            # Pass original protocol (http/https)
    }

    # =============================================================================
    # PERFORMANCE: STATIC FILE CACHING
    # =============================================================================
    # Cache static assets (images, CSS, JS) for better performance
    
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;                                             # Cache for 1 year
        add_header Cache-Control "public, immutable";          # Mark as cacheable and immutable
    }
    # Static files rarely change, so aggressive caching improves performance

    # =============================================================================
    # MONITORING: HEALTH CHECK ENDPOINT
    # =============================================================================
    # Provide simple health check for monitoring systems
    
    location /health {
        access_log off;                                         # Don't log health check requests
        return 200 "healthy\n";                                # Return simple success response
        add_header Content-Type text/plain;                    # Set content type
    }
    # This endpoint is used by Docker health checks and monitoring systems
}

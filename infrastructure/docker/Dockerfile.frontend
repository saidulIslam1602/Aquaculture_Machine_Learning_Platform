# =============================================================================
# FRONTEND DOCKERFILE - AQUACULTURE PLATFORM WEB INTERFACE
# =============================================================================
#
# WHAT IS THIS FILE?
# This Dockerfile creates a container for the web frontend that users interact
# with in their browsers. Think of it as packaging the "user interface" that
# fish farm managers use to monitor and control their operations.
#
# WHAT IS THE FRONTEND?
# The frontend is the "face" of the platform that users see:
# - Web dashboard showing fish farm status and metrics
# - Forms for adding new ponds, fish, and feeding schedules
# - Charts and graphs displaying sensor data and trends
# - Mobile-responsive interface for use on phones/tablets
# - Real-time updates of fish health and environmental conditions
#
# FRONTEND TECHNOLOGY STACK:
# - React: Modern JavaScript framework for building user interfaces
# - TypeScript: Type-safe JavaScript for better code quality
# - Vite: Fast build tool and development server
# - Nginx: Web server for serving the built static files
#
# TWO-STAGE BUILD PROCESS:
# Stage 1 (Builder): Compile and build the React application
# Stage 2 (Production): Serve the built files with Nginx web server
# Result: Fast, lightweight container serving optimized static files
#
# WHY USE NGINX FOR FRONTEND?
# - Extremely fast at serving static files (HTML, CSS, JavaScript)
# - Small memory footprint and high performance
# - Built-in compression and caching features
# - Handles many concurrent users efficiently
# - Industry standard for serving web applications
#
# AUTHOR: DevOps Team
# VERSION: 1.0.0
# UPDATED: 2024-10-26
# =============================================================================

# =============================================================================
# STAGE 1: BUILD STAGE - COMPILE REACT APPLICATION
# =============================================================================
# Use Node.js to build the React frontend from source code

FROM node:20-alpine as builder

WORKDIR /app

# Copy package files first (for better Docker layer caching)
# This allows Docker to cache the npm install step if dependencies don't change
COPY frontend/package*.json ./

# Install all dependencies (including dev dependencies needed for build)
# npm ci: Clean install from package-lock.json (faster and more reliable than npm install)
RUN npm ci

# Copy frontend source code
COPY frontend/ ./

# =============================================================================
# BUILD CONFIGURATION - API CONNECTION SETUP
# =============================================================================
# Configure where the frontend should connect to the backend API

# Set API URL for build (can be overridden during docker build)
ARG VITE_API_URL=http://localhost:8000
ENV VITE_API_URL=$VITE_API_URL

# Vite uses VITE_ prefix for environment variables available to the frontend
# This tells the React app where to find the backend API service

# Build the React application for production
# This compiles TypeScript, bundles JavaScript, optimizes images, etc.
RUN npm run build

# =============================================================================
# STAGE 2: PRODUCTION STAGE - SERVE WITH NGINX
# =============================================================================
# Use lightweight Nginx to serve the built static files

FROM nginx:alpine

# Copy built React application from builder stage
# /app/dist contains the compiled HTML, CSS, JS files
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy custom Nginx configuration for single-page application (SPA)
# This configuration handles React Router (client-side routing)
COPY infrastructure/docker/nginx.conf /etc/nginx/conf.d/default.conf

# =============================================================================
# CONTAINER CONFIGURATION FOR FRONTEND
# =============================================================================

# Expose HTTP port (standard web port)
EXPOSE 80

# =============================================================================
# HEALTH CHECK FOR FRONTEND
# =============================================================================
# Check if Nginx is serving the web application correctly

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:80 || exit 1

# Health check parameters for frontend:
# --start-period=5s: Short grace period (static files load quickly)
# --timeout=3s: Quick timeout (web requests should be fast)
# Uses wget instead of curl (available in alpine images)

# =============================================================================
# FRONTEND STARTUP
# =============================================================================
# Start Nginx web server to serve the React application

CMD ["nginx", "-g", "daemon off;"]

# nginx -g "daemon off;": Run Nginx in foreground (required for containers)
# This serves the React app on port 80 for users to access via web browsers

# ============================================================================
# Kubernetes Deployment Manifests for Aquaculture ML Platform
# ============================================================================
#
# This file contains production-grade Kubernetes deployment configurations
# for the Aquaculture Machine Learning Platform. It defines:
#
# COMPONENTS:
# - Namespace isolation for production environment
# - API service deployment with high availability (3 replicas)
# - ML service deployment with auto-scaling capabilities
# - Worker service deployment for background tasks
# - Load balancer services for external access
# - ConfigMaps and Secrets for configuration management
#
# FEATURES:
# - Rolling updates with zero-downtime deployment
# - Health checks (liveness and readiness probes)
# - Resource limits and requests for optimal scheduling
# - Security contexts with non-root users
# - Prometheus monitoring integration
# - Horizontal Pod Autoscaling (HPA)
#
# DEPLOYMENT:
# kubectl apply -f infrastructure/kubernetes/deployment.yaml
#
# MONITORING:
# kubectl get pods -n aquaculture-prod
# kubectl logs -f deployment/api-service -n aquaculture-prod
# ============================================================================

---
# ============================================================================
# NAMESPACE DEFINITION
# ============================================================================
# Isolated namespace for production aquaculture platform deployment

apiVersion: v1
kind: Namespace
metadata:
  name: aquaculture-prod
  labels:
    name: aquaculture-prod
    environment: production
    app.kubernetes.io/name: aquaculture-platform
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/component: infrastructure

---
# API Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-service
  namespace: aquaculture-prod
  labels:
    app: api-service
    tier: backend
    version: v1
spec:
  replicas: 3  # High availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero-downtime deployment
  selector:
    matchLabels:
      app: api-service
  template:
    metadata:
      labels:
        app: api-service
        tier: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      
      # Init containers for database migration
      initContainers:
        - name: db-migration
          image: api-service:latest
          command: ['alembic', 'upgrade', 'head']
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: url
      
      containers:
        - name: api
          image: api-service:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          
          # Environment variables from ConfigMap and Secrets
          envFrom:
            - configMapRef:
                name: api-config
            - secretRef:
                name: api-secrets
          
          # Resource limits and requests
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          
          # Health checks
          livenessProbe:
            httpGet:
              path: /live
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /ready
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          
          # Startup probe for slow starting containers
          startupProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
          
          # Security context
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL

---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: aquaculture-prod
  labels:
    app: api-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: LoadBalancer
  selector:
    app: api-service
  ports:
    - name: http
      port: 80
      targetPort: 8000
      protocol: TCP
  sessionAffinity: ClientIP  # Sticky sessions

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-service-hpa
  namespace: aquaculture-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-service
  minReplicas: 3
  maxReplicas: 20
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # 5 minutes
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0  # Immediate scale up
      policies:
        - type: Percent
          value: 100
          periodSeconds: 30
        - type: Pods
          value: 2
          periodSeconds: 30
      selectPolicy: Max

---
# ConfigMap for API configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: aquaculture-prod
data:
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  PROMETHEUS_ENABLED: "true"
  CORS_ORIGINS: "https://app.example.com"

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-network-policy
  namespace: aquaculture-prod
spec:
  podSelector:
    matchLabels:
      app: api-service
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: aquaculture-prod
      ports:
        - protocol: TCP
          port: 8000
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: aquaculture-prod
      ports:
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 6379  # Redis
        - protocol: TCP
          port: 9092  # Kafka

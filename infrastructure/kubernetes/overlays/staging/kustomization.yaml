# =============================================================================
# STAGING ENVIRONMENT CONFIGURATION - AQUACULTURE PLATFORM TESTING
# =============================================================================
#
# WHAT IS THIS FILE?
# This file customizes the base Kubernetes configuration specifically for the
# staging environment. Staging is like a "dress rehearsal" where new features
# are tested before going to production.
#
# WHAT IS A STAGING ENVIRONMENT?
# Staging is a testing environment that:
# - Mimics production but uses fewer resources (cheaper to run)
# - Tests new features before they reach real users
# - Allows developers to experiment safely
# - Validates deployments and configurations
# - Provides a place to run integration tests
#
# HOW THIS DIFFERS FROM PRODUCTION:
# - Smaller servers (less CPU, memory, storage) → Lower costs
# - Fewer replicas (1 instead of 3) → Simpler testing
# - Debug logging enabled → Better troubleshooting
# - Relaxed security settings → Easier development
# - Test data instead of real user data → Safe experimentation
#
# STAGING CHARACTERISTICS:
# - Cost-optimized: Uses minimal resources to save money
# - Developer-friendly: Debug logging and relaxed constraints
# - Testing-focused: Single replicas for simpler debugging
# - Temporary: Can be reset/rebuilt frequently
# - Safe: No real user data or business impact
#
# KUSTOMIZE OVERLAYS EXPLAINED:
# Think of this like customizing a car:
# - Base configuration = Standard car model
# - Staging overlay = Economy package (smaller engine, basic features)
# - Production overlay = Premium package (powerful engine, all features)
#
# AUTHOR: DevOps Team
# VERSION: 1.0.0
# UPDATED: 2024-10-26
# =============================================================================

# =============================================================================
# STAGING KUSTOMIZATION RESOURCE DEFINITION
# =============================================================================

apiVersion: kustomize.config.k8s.io/v1beta1    # Kustomize API version
kind: Kustomization                            # Resource type: Kustomization

metadata:
  name: aquaculture-platform-staging          # Staging configuration name
  annotations:
    config.kubernetes.io/local-config: "true" # Mark as local config file

# =============================================================================
# BASE CONFIGURATION REFERENCE
# =============================================================================
# Import the base configuration and customize it for staging

resources:
- ../../base                                   # Path to base configuration directory

# =============================================================================
# STAGING ENVIRONMENT SETTINGS
# =============================================================================

# Staging-specific namespace (isolated from production)
namespace: aquaculture-staging

# Staging-specific name prefix (helps identify staging resources)
namePrefix: staging-

# =============================================================================
# STAGING LABELS AND ANNOTATIONS
# =============================================================================
# These help identify and organize staging resources

# Common labels applied to all staging resources
commonLabels:
  environment: staging                         # Environment identifier
  app.kubernetes.io/instance: staging         # Instance identifier

# Common annotations for staging metadata
commonAnnotations:
  platform.aquaculture.com/environment: "staging"    # Environment type
  platform.aquaculture.com/purpose: "testing"       # Purpose of this environment
  platform.aquaculture.com/cost-center: "development"  # Cost allocation

# Staging-specific image tags (typically latest or development builds)
images:
- name: aquaculture/api
  newTag: "staging-latest"
- name: aquaculture/ml-service
  newTag: "staging-latest"  
- name: aquaculture/worker
  newTag: "staging-latest"

# Staging replica counts (reduced for cost optimization)
replicas:
- name: api-service
  count: 1
- name: ml-service
  count: 1
- name: worker-service
  count: 1

# Configuration maps for staging environment
configMapGenerator:
- name: api-config
  literals:
  - ENVIRONMENT=staging
  - LOG_LEVEL=DEBUG
  - DATABASE_POOL_SIZE=5
  - DATABASE_MAX_OVERFLOW=10
  - REDIS_MAX_CONNECTIONS=10
  - ML_SERVICE_URL=http://staging-ml-service:8001
  - WORKER_CONCURRENCY=2
  - ENABLE_CORS=true
  - DEBUG_MODE=true

- name: ml-config
  literals:
  - ENVIRONMENT=staging
  - LOG_LEVEL=DEBUG
  - MODEL_CACHE_SIZE=1
  - BATCH_SIZE=16
  - MAX_WORKERS=2
  - ENABLE_MODEL_VERSIONING=true
  - MODEL_UPDATE_INTERVAL=3600

- name: worker-config
  literals:
  - ENVIRONMENT=staging
  - LOG_LEVEL=DEBUG
  - CELERY_BROKER_URL=redis://staging-redis:6379/0
  - CELERY_RESULT_BACKEND=redis://staging-redis:6379/0
  - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
  - WORKER_PREFETCH_MULTIPLIER=1
  - TASK_SOFT_TIME_LIMIT=300
  - TASK_TIME_LIMIT=600

- name: database-config
  literals:
  - POSTGRES_DB=aquaculture_staging
  - POSTGRES_MAX_CONNECTIONS=50
  - POSTGRES_SHARED_BUFFERS=128MB
  - POSTGRES_EFFECTIVE_CACHE_SIZE=256MB

- name: postgresql-config
  files:
  - postgresql.conf

- name: redis-config
  files:
  - redis.conf

# Secret generators (use external secret management in production)
secretGenerator:
- name: api-secrets
  literals:
  - jwt-secret=staging-jwt-secret-change-me
  - database-url=postgresql://staging_user:staging_pass@staging-postgresql:5432/aquaculture_staging

- name: ml-secrets
  literals:
  - model-signing-key=staging-model-key-change-me
  - database-url=postgresql://staging_user:staging_pass@staging-postgresql:5432/aquaculture_staging

- name: worker-secrets
  literals:
  - database-url=postgresql://staging_user:staging_pass@staging-postgresql:5432/aquaculture_staging

- name: database-secrets
  literals:
  - postgres-user=staging_user
  - postgres-password=staging_pass
  - postgres-exporter-dsn=postgresql://staging_user:staging_pass@localhost:5432/aquaculture_staging?sslmode=disable

- name: redis-secrets
  literals:
  - redis-password=staging-redis-pass

# Patches to modify base resources for staging
patches:
# Reduce resource limits for staging
- target:
    kind: Deployment
    name: api-service
  patch: |-
    - op: replace
      path: /spec/template/spec/containers/0/resources/requests/memory
      value: "256Mi"
    - op: replace
      path: /spec/template/spec/containers/0/resources/limits/memory
      value: "512Mi"
    - op: replace
      path: /spec/template/spec/containers/0/resources/requests/cpu
      value: "100m"
    - op: replace
      path: /spec/template/spec/containers/0/resources/limits/cpu
      value: "250m"

- target:
    kind: Deployment
    name: ml-service
  patch: |-
    - op: replace
      path: /spec/template/spec/containers/0/resources/requests/memory
      value: "512Mi"
    - op: replace
      path: /spec/template/spec/containers/0/resources/limits/memory
      value: "1Gi"
    - op: replace
      path: /spec/template/spec/containers/0/resources/requests/cpu
      value: "200m"
    - op: replace
      path: /spec/template/spec/containers/0/resources/limits/cpu
      value: "500m"

- target:
    kind: Deployment
    name: worker-service
  patch: |-
    - op: replace
      path: /spec/template/spec/containers/0/resources/requests/memory
      value: "256Mi"
    - op: replace
      path: /spec/template/spec/containers/0/resources/limits/memory
      value: "512Mi"
    - op: replace
      path: /spec/template/spec/containers/0/resources/requests/cpu
      value: "100m"
    - op: replace
      path: /spec/template/spec/containers/0/resources/limits/cpu
      value: "250m"

# Reduce storage for staging database
- target:
    kind: StatefulSet
    name: postgresql
  patch: |-
    - op: replace
      path: /spec/volumeClaimTemplates/0/spec/resources/requests/storage
      value: "5Gi"

# Reduce storage for staging Redis
- target:
    kind: StatefulSet
    name: redis
  patch: |-
    - op: replace
      path: /spec/volumeClaimTemplates/0/spec/resources/requests/storage
      value: "2Gi"
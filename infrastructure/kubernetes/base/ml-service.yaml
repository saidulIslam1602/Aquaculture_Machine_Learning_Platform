# =============================================================================
# ML SERVICE DEPLOYMENT - AQUACULTURE AI/ML INFERENCE ENGINE
# =============================================================================
#
# WHAT IS THIS FILE?
# This file defines how to deploy the Machine Learning service that provides
# AI-powered predictions and insights for fish farming operations. Think of it
# as the "brain" of the platform that analyzes data and makes smart recommendations.
#
# WHAT DOES THE ML SERVICE DO?
# - Fish health analysis: Detects diseases and health issues from images
# - Growth prediction: Forecasts fish growth rates and optimal harvest times
# - Feed optimization: Recommends feeding schedules and amounts
# - Water quality analysis: Predicts optimal environmental conditions
# - Anomaly detection: Identifies unusual patterns in sensor data
# - Yield forecasting: Estimates production outcomes
#
# KEY TECHNICAL FEATURES:
# - PyTorch/TensorFlow models for deep learning inference
# - GPU acceleration support (when available)
# - Model versioning and hot-swapping (update models without downtime)
# - Batch processing for efficient resource usage
# - Real-time and scheduled prediction modes
# - Performance monitoring and model drift detection
#
# RESOURCE CONSIDERATIONS:
# ML workloads are typically more resource-intensive than regular web services.
# This service may require more CPU, memory, and potentially GPU resources
# depending on the complexity of the models being served.
#
# AUTHOR: DevOps Team
# VERSION: 1.0.0
# UPDATED: 2024-10-26
# =============================================================================

# =============================================================================
# ML SERVICE DEPLOYMENT DEFINITION
# =============================================================================

apiVersion: apps/v1                        # Kubernetes API version for deployments
kind: Deployment                           # Resource type: Deployment
metadata:
  name: ml-service                         # ML service deployment name
  
  # =============================================================================
  # ML SERVICE LABELS - IDENTIFICATION AND ORGANIZATION
  # =============================================================================
  
  labels:
    app: ml-service                                     # Application identifier
    component: ml-inference                             # Component type (inference engine)
    tier: ml                                           # Application tier (machine learning)
    app.kubernetes.io/name: ml-service                 # Standard Kubernetes app name
    app.kubernetes.io/component: ml-inference          # Standard component label
    app.kubernetes.io/part-of: aquaculture-platform   # Part of larger platform

spec:
  # =============================================================================
  # REPLICA CONFIGURATION - RESOURCE-INTENSIVE SERVICE SCALING
  # =============================================================================
  
  replicas: 1                              # Start with 1 replica (ML workloads are resource-heavy)
  
  # =============================================================================
  # UPDATE STRATEGY - CAREFUL DEPLOYMENT FOR ML MODELS
  # =============================================================================
  # ML services need careful updates to avoid model inconsistencies
  
  strategy:
    type: RollingUpdate                    # Gradually replace old pods with new ones
    rollingUpdate:
      maxSurge: 1                          # Allow 1 extra pod during updates
      maxUnavailable: 0                    # Keep at least 1 pod running (no downtime)
  
  # =============================================================================
  # POD SELECTOR - WHICH PODS THIS DEPLOYMENT MANAGES
  # =============================================================================
  
  selector:
    matchLabels:
      app: ml-service                      # Match pods with this app label
      component: ml-inference              # Match pods with this component label
  template:
    metadata:
      labels:
        app: ml-service
        component: ml-inference
        tier: ml
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ml-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: ml-inference
        image: aquaculture/ml-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8001
          protocol: TCP
        - name: metrics
          containerPort: 8001
          protocol: TCP
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: ml-config
              key: ENVIRONMENT
        - name: MODEL_PATH
          value: "/app/models"
        - name: INFERENCE_DEVICE
          valueFrom:
            configMapKeyRef:
              name: ml-config
              key: INFERENCE_DEVICE
        - name: BATCH_SIZE
          valueFrom:
            configMapKeyRef:
              name: ml-config
              key: BATCH_SIZE
        envFrom:
        - configMapRef:
            name: ml-config
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            # GPU resources will be added in overlays if available
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60  # ML models take time to load
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 20  # Allow extra time for model loading
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: models
          mountPath: /app/models
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: var-log
          mountPath: /var/log
      volumes:
      - name: models
        configMap:
          name: ml-models
          optional: true
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: var-log
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 60  # Allow time for graceful shutdown

---
# Service for ML Service
apiVersion: v1
kind: Service
metadata:
  name: ml-service
  labels:
    app: ml-service
    component: ml-inference
    tier: ml
    app.kubernetes.io/name: ml-service
    app.kubernetes.io/component: ml-inference
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8001
    targetPort: http
    protocol: TCP
  selector:
    app: ml-service
    component: ml-inference

---
# ServiceAccount for ML Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ml-service
  labels:
    app: ml-service
    component: ml-inference
    app.kubernetes.io/name: ml-service
    app.kubernetes.io/component: ml-inference
# =============================================================================
# WORKER SERVICE DEPLOYMENT - AQUACULTURE BACKGROUND TASK PROCESSOR
# =============================================================================
#
# WHAT IS THIS FILE?
# This file defines how to deploy the Worker service that handles background
# tasks and long-running processes. Think of it as the "behind-the-scenes"
# workforce that processes tasks without blocking user interactions.
#
# WHAT DOES THE WORKER SERVICE DO?
# - Data processing: Analyzes large datasets from sensors and cameras
# - Report generation: Creates daily/weekly/monthly farm reports
# - Email notifications: Sends alerts and updates to farm managers
# - Image processing: Processes fish photos for health analysis
# - Data synchronization: Syncs data between different systems
# - Scheduled tasks: Runs maintenance and cleanup operations
# - Batch ML inference: Processes multiple predictions efficiently
#
# WHY USE BACKGROUND WORKERS?
# Some tasks take a long time to complete (like analyzing thousands of images).
# Instead of making users wait, these tasks are queued and processed by workers
# in the background, allowing the main API to respond quickly to users.
#
# KEY TECHNICAL FEATURES:
# - Celery distributed task processing (Python task queue)
# - Redis message broker integration (task queue storage)
# - Kafka message consumption (real-time data streams)
# - Auto-scaling based on queue length (more workers when busy)
# - Comprehensive error handling and retry logic
# - Task monitoring and progress tracking
#
# SCALING CHARACTERISTICS:
# Workers can be scaled horizontally (add more workers) to handle increased
# task loads. They're designed to be stateless and can be safely restarted.
#
# AUTHOR: DevOps Team
# VERSION: 1.0.0
# UPDATED: 2024-10-26
# =============================================================================

# =============================================================================
# WORKER SERVICE DEPLOYMENT DEFINITION
# =============================================================================

apiVersion: apps/v1                           # Kubernetes API version for deployments
kind: Deployment                              # Resource type: Deployment
metadata:
  name: worker-service                        # Worker service deployment name
  
  # =============================================================================
  # WORKER SERVICE LABELS - IDENTIFICATION AND ORGANIZATION
  # =============================================================================
  
  labels:
    app: worker-service                                 # Application identifier
    component: worker                                   # Component type (background worker)
    tier: worker                                       # Application tier (worker/processing)
    app.kubernetes.io/name: worker-service            # Standard Kubernetes app name
    app.kubernetes.io/component: worker                # Standard component label
    app.kubernetes.io/part-of: aquaculture-platform   # Part of larger platform

spec:
  # =============================================================================
  # REPLICA CONFIGURATION - SCALABLE WORKER POOL
  # =============================================================================
  
  replicas: 2                                 # Start with 2 workers (can scale based on load)
  
  # =============================================================================
  # UPDATE STRATEGY - FLEXIBLE DEPLOYMENT FOR WORKERS
  # =============================================================================
  # Workers can tolerate brief downtime since tasks can be retried
  
  strategy:
    type: RollingUpdate                       # Gradually replace old pods with new ones
    rollingUpdate:
      maxSurge: 1                             # Allow 1 extra pod during updates
      maxUnavailable: 1                       # Allow 1 pod to be down (workers are fault-tolerant)
  
  # =============================================================================
  # POD SELECTOR - WHICH PODS THIS DEPLOYMENT MANAGES
  # =============================================================================
  
  selector:
    matchLabels:
      app: worker-service                     # Match pods with this app label
      component: worker                       # Match pods with this component label
  template:
    metadata:
      labels:
        app: worker-service
        component: worker
        tier: worker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8002"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: worker-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: worker
        image: aquaculture/worker:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: 8002
          protocol: TCP
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: worker-config
              key: ENVIRONMENT
        - name: CELERY_BROKER_URL
          valueFrom:
            configMapKeyRef:
              name: worker-config
              key: CELERY_BROKER_URL
        - name: CELERY_RESULT_BACKEND
          valueFrom:
            configMapKeyRef:
              name: worker-config
              key: CELERY_RESULT_BACKEND
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: worker-config
              key: KAFKA_BOOTSTRAP_SERVERS
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: worker-secrets
              key: database-url
        envFrom:
        - configMapRef:
            name: worker-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "celery -A worker inspect ping"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "celery -A worker inspect active"
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-log
          mountPath: /var/log
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-log
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Service for Worker (metrics only)
apiVersion: v1
kind: Service
metadata:
  name: worker-service
  labels:
    app: worker-service
    component: worker
    tier: worker
    app.kubernetes.io/name: worker-service
    app.kubernetes.io/component: worker
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 8002
    targetPort: metrics
    protocol: TCP
  selector:
    app: worker-service
    component: worker

---
# ServiceAccount for Worker Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: worker-service
  labels:
    app: worker-service
    component: worker
    app.kubernetes.io/name: worker-service
    app.kubernetes.io/component: worker
# ============================================================================
# Base API Service Deployment
# ============================================================================
#
# This file defines the base API service deployment configuration that
# provides the core backend functionality for the Aquaculture ML Platform.
#
# FEATURES:
# - FastAPI backend with async/await support
# - Health checks for liveness and readiness
# - Security context with non-root user
# - Resource limits and requests
# - Rolling update strategy
# - Prometheus metrics exposure
# ============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-service
  labels:
    app: api-service
    component: backend
    tier: api
    app.kubernetes.io/name: api-service
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: aquaculture-platform
spec:
  replicas: 2  # Base replica count (will be overridden in overlays)
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero-downtime deployments
  selector:
    matchLabels:
      app: api-service
      component: backend
  template:
    metadata:
      labels:
        app: api-service
        component: backend
        tier: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: api-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: aquaculture/api:latest  # Will be overridden in overlays
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 8000
          protocol: TCP
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: ENVIRONMENT
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: REDIS_URL
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: jwt-secret-key
        envFrom:
        - configMapRef:
            name: api-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-log
          mountPath: /var/log
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-log
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Service for API
apiVersion: v1
kind: Service
metadata:
  name: api-service
  labels:
    app: api-service
    component: backend
    tier: api
    app.kubernetes.io/name: api-service
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: http
    protocol: TCP
  selector:
    app: api-service
    component: backend

---
# ServiceAccount for API
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-service
  labels:
    app: api-service
    component: backend
    app.kubernetes.io/name: api-service
    app.kubernetes.io/component: backend
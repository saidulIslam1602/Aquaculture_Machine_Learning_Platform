# =============================================================================
# API SERVICE DEPLOYMENT - AQUACULTURE ML PLATFORM BACKEND
# =============================================================================
#
# WHAT IS THIS FILE?
# This file defines how to deploy the main API service (backend) of the
# aquaculture platform. The API service handles all HTTP requests from
# the frontend and mobile apps.
#
# WHAT DOES THE API SERVICE DO?
# - Handles user authentication and authorization
# - Manages fish farm data (ponds, sensors, feeding schedules)
# - Processes ML predictions and recommendations
# - Provides REST API endpoints for frontend applications
# - Stores and retrieves data from the database
#
# KEY KUBERNETES CONCEPTS:
# - Deployment: Manages multiple copies (replicas) of the API service
# - Pod: Individual containers running the API service code
# - Service: Network endpoint that routes traffic to healthy pods
# - Rolling Updates: Deploy new versions without downtime
# - Health Checks: Automatically restart unhealthy containers
#
# DEPLOYMENT STRATEGY:
# This uses a rolling update strategy, which means when deploying a new
# version, Kubernetes gradually replaces old pods with new ones, ensuring
# the service remains available throughout the update process.
#
# AUTHOR: DevOps Team
# VERSION: 1.0.0
# UPDATED: 2024-10-26
# =============================================================================

# =============================================================================
# DEPLOYMENT RESOURCE DEFINITION
# =============================================================================

apiVersion: apps/v1                     # Kubernetes API version for deployments
kind: Deployment                        # Resource type: Deployment (manages pods)
metadata:
  name: api-service                     # Deployment name (unique within namespace)
  
  # =============================================================================
  # DEPLOYMENT LABELS - ORGANIZATION AND SELECTION
  # =============================================================================
  # Labels help Kubernetes and tools identify and manage this deployment
  
  labels:
    app: api-service                                    # Application identifier
    component: backend                                  # Component type (backend vs frontend)
    tier: api                                          # Application tier (api, database, cache)
    app.kubernetes.io/name: api-service                # Standard Kubernetes app name
    app.kubernetes.io/component: backend               # Standard component label
    app.kubernetes.io/part-of: aquaculture-platform   # Part of larger platform

spec:
  # =============================================================================
  # REPLICA CONFIGURATION - HOW MANY COPIES TO RUN
  # =============================================================================
  
  replicas: 2                           # Number of pod copies (base count, overlays will modify)
  
  # =============================================================================
  # UPDATE STRATEGY - HOW TO DEPLOY NEW VERSIONS
  # =============================================================================
  # Rolling update ensures zero-downtime deployments
  
  strategy:
    type: RollingUpdate                 # Gradually replace old pods with new ones
    rollingUpdate:
      maxSurge: 1                       # Maximum extra pods during update (1 more than replicas)
      maxUnavailable: 0                 # Minimum pods that must stay running (zero-downtime)
  
  # =============================================================================
  # POD SELECTOR - WHICH PODS THIS DEPLOYMENT MANAGES
  # =============================================================================
  # Tells Kubernetes which pods belong to this deployment
  
  selector:
    matchLabels:
      app: api-service                  # Match pods with this app label
      component: backend                # Match pods with this component label
  template:
    metadata:
      labels:
        app: api-service
        component: backend
        tier: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: api-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: aquaculture/api:latest  # Will be overridden in overlays
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 8000
          protocol: TCP
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: ENVIRONMENT
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: REDIS_URL
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: jwt-secret-key
        envFrom:
        - configMapRef:
            name: api-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-log
          mountPath: /var/log
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-log
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Service for API
apiVersion: v1
kind: Service
metadata:
  name: api-service
  labels:
    app: api-service
    component: backend
    tier: api
    app.kubernetes.io/name: api-service
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: http
    protocol: TCP
  selector:
    app: api-service
    component: backend

---
# ServiceAccount for API
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-service
  labels:
    app: api-service
    component: backend
    app.kubernetes.io/name: api-service
    app.kubernetes.io/component: backend
# ============================================================================
# Base Database Service Configuration
# ============================================================================
#
# This file defines the base PostgreSQL database configuration for the
# Aquaculture ML Platform. Includes persistent storage, backup configuration,
# and monitoring setup.
#
# FEATURES:
# - PostgreSQL 15 with persistent storage  
# - Automated backup configuration
# - Connection pooling ready
# - Performance monitoring
# - High availability setup
# - Resource management and limits
# ============================================================================

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  labels:
    app: postgresql
    component: database
    tier: database
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: aquaculture-platform
spec:
  serviceName: postgresql
  replicas: 1  # Single instance for base
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      component: database
  template:
    metadata:
      labels:
        app: postgresql
        component: database
        tier: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: postgresql
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # postgres user
        fsGroup: 999
      containers:
      - name: postgresql
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # PostgreSQL needs write access
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
          readOnly: true
      
      # PostgreSQL Exporter for Prometheus monitoring
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.13.2
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: 9187
          protocol: TCP
        env:
        - name: DATA_SOURCE_NAME
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-exporter-dsn
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534  # nobody user
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
  
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
      labels:
        app: postgresql
        component: database
    spec:
      accessModes: 
      - ReadWriteOnce
      storageClassName: standard  # Override in overlays
      resources:
        requests:
          storage: 10Gi  # Base storage size

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  labels:
    app: postgresql
    component: database
    tier: database
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
  - name: metrics
    port: 9187
    targetPort: metrics
    protocol: TCP
  selector:
    app: postgresql
    component: database

---
# Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: postgresql-headless
  labels:
    app: postgresql
    component: database
    tier: database
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
  selector:
    app: postgresql
    component: database

---
# ServiceAccount for PostgreSQL
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgresql
  labels:
    app: postgresql
    component: database
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
# =============================================================================
# REDIS CACHE SERVICE - AQUACULTURE PLATFORM HIGH-SPEED DATA STORAGE
# =============================================================================
#
# WHAT IS THIS FILE?
# This file defines how to deploy Redis, a high-speed in-memory data store
# that acts as the platform's "quick access memory" for frequently used data
# and real-time communication between services.
#
# WHAT DOES REDIS DO IN THE PLATFORM?
# - Caching: Stores frequently accessed data for faster API responses
# - Session storage: Keeps user login sessions and temporary data
# - Message broker: Handles communication between API and worker services
# - Task queue: Stores background tasks waiting to be processed
# - Real-time data: Buffers live sensor readings before database storage
# - Rate limiting: Tracks API usage to prevent abuse
# - Temporary calculations: Stores intermediate ML processing results
#
# WHY USE REDIS?
# Redis is extremely fast because it stores data in memory (RAM) rather than
# on disk. This makes it perfect for:
# - Sub-millisecond response times
# - High-throughput operations
# - Real-time data processing
# - Temporary data that doesn't need permanent storage
#
# KEY TECHNICAL FEATURES:
# - Redis 7 with latest performance improvements
# - Persistence options (data can survive restarts)
# - Memory optimization and eviction policies
# - Security configuration with authentication
# - Performance monitoring and metrics
# - Backup and recovery capabilities
#
# REDIS VS POSTGRESQL:
# - Redis: Fast, temporary, in-memory (like short-term memory)
# - PostgreSQL: Reliable, permanent, disk-based (like long-term memory)
#
# AUTHOR: DevOps Team
# VERSION: 1.0.0
# UPDATED: 2024-10-26
# =============================================================================

# =============================================================================
# REDIS STATEFULSET DEFINITION
# =============================================================================

apiVersion: apps/v1                           # Kubernetes API version for StatefulSets
kind: StatefulSet                             # Resource type: StatefulSet (for persistent cache)
metadata:
  name: redis                                 # Redis StatefulSet name
  
  # =============================================================================
  # REDIS LABELS - IDENTIFICATION AND ORGANIZATION
  # =============================================================================
  
  labels:
    app: redis                                          # Application identifier
    component: cache                                    # Component type (cache/memory store)
    tier: cache                                        # Application tier (caching layer)
    app.kubernetes.io/name: redis                      # Standard Kubernetes app name
    app.kubernetes.io/component: cache                 # Standard component label
    app.kubernetes.io/part-of: aquaculture-platform   # Part of larger platform

spec:
  # =============================================================================
  # STATEFULSET CONFIGURATION - CACHE-SPECIFIC SETTINGS
  # =============================================================================
  
  serviceName: redis                          # Headless service name for stable network identity
  replicas: 1                                # Single instance for base (production may use clustering)
  
  # =============================================================================
  # UPDATE STRATEGY - CACHE UPDATE HANDLING
  # =============================================================================
  # Redis can handle rolling updates but may briefly lose cached data
  
  updateStrategy:
    type: RollingUpdate                       # Update pods one at a time
  
  # =============================================================================
  # POD SELECTOR - WHICH PODS THIS STATEFULSET MANAGES
  # =============================================================================
  
  selector:
    matchLabels:
      app: redis                              # Match pods with this app label
      component: cache                        # Match pods with this component label
  template:
    metadata:
      labels:
        app: redis
        component: cache
        tier: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: redis
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # redis user
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        command:
        - redis-server
        - /etc/redis/redis.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: redis-password
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Redis needs write access
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis/redis.conf
          subPath: redis.conf
          readOnly: true
      
      # Redis Exporter for Prometheus monitoring
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.54.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: 9121
          protocol: TCP
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: redis-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534  # nobody user
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app: redis
        component: cache
    spec:
      accessModes: 
      - ReadWriteOnce
      storageClassName: standard  # Override in overlays
      resources:
        requests:
          storage: 5Gi  # Base storage size

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: redis
    component: cache
    tier: cache
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  - name: metrics
    port: 9121
    targetPort: metrics
    protocol: TCP
  selector:
    app: redis
    component: cache

---
# Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  labels:
    app: redis
    component: cache
    tier: cache
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  selector:
    app: redis
    component: cache

---
# ServiceAccount for Redis
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis
  labels:
    app: redis
    component: cache
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
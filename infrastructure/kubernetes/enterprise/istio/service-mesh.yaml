# ============================================================================
# ENTERPRISE ISTIO SERVICE MESH CONFIGURATION
# ============================================================================
#
# This configuration implements enterprise-grade service mesh for:
# - Secure service-to-service communication with mTLS
# - Advanced traffic management and load balancing
# - Enterprise observability and distributed tracing
# - Circuit breaking and fault injection for resilience
# - Enterprise security policies and compliance
# - Multi-environment service isolation
#
# ENTERPRISE FEATURES:
# - Automatic mTLS between all services
# - Enterprise-grade circuit breakers and retries
# - Advanced traffic splitting for A/B testing
# - Enterprise monitoring and alerting integration
# - Compliance and audit logging for all communications
# - Zero-trust network security model
# ============================================================================

apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: aquaculture-external-services
  namespace: aquaculture-platform
  labels:
    app.kubernetes.io/name: aquaculture-platform
    app.kubernetes.io/component: service-entry
    enterprise.security/external-access: "controlled"
  annotations:
    enterprise.istio.io/description: "Enterprise external service access control"
    enterprise.istio.io/security-review: "approved"
    enterprise.istio.io/compliance: "sox-gdpr"
spec:
  hosts:
    # Enterprise LDAP Server
    - enterprise-ldap.enterprise.local
    # Enterprise Database Servers
    - postgres.enterprise.local
    - sqlserver.enterprise.local
    # Enterprise Monitoring Services
    - prometheus.enterprise.local
    - grafana.enterprise.local
    - jaeger.enterprise.local
    # Enterprise Security Services
    - vault.enterprise.local
    - keycloak.enterprise.local
  ports:
    - number: 389
      name: ldap
      protocol: TCP
    - number: 636
      name: ldaps
      protocol: TCP
    - number: 5432
      name: postgres
      protocol: TCP
    - number: 1433
      name: sqlserver
      protocol: TCP
    - number: 443
      name: https
      protocol: HTTPS
    - number: 8200
      name: vault
      protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS

---
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: aquaculture-enterprise-sidecar
  namespace: aquaculture-platform
  labels:
    app.kubernetes.io/name: aquaculture-platform
    app.kubernetes.io/component: sidecar
    enterprise.security/proxy: "enabled"
  annotations:
    enterprise.istio.io/description: "Enterprise sidecar configuration"
    enterprise.istio.io/security-level: "high"
spec:
  workloadSelector:
    labels:
      app: aquaculture-platform
  
  ingress:
    - port:
        number: 8000
        protocol: HTTP
        name: api-port
      defaultEndpoint: 127.0.0.1:8000
      captureMode: IPTABLES
    - port:
        number: 8001
        protocol: HTTP
        name: ml-port
      defaultEndpoint: 127.0.0.1:8001
      captureMode: IPTABLES
    - port:
        number: 8443
        protocol: HTTPS
        name: api-https
      defaultEndpoint: 127.0.0.1:8443
      captureMode: IPTABLES
    - port:
        number: 9090
        protocol: HTTP
        name: metrics
      defaultEndpoint: 127.0.0.1:9090
      captureMode: IPTABLES
  
  egress:
    # Allow access to enterprise services
    - hosts:
        - "./*"
        - "istio-system/*"
        - "enterprise-ldap.enterprise.local"
        - "postgres.enterprise.local"
        - "sqlserver.enterprise.local"
        - "prometheus.enterprise.local"
        - "grafana.enterprise.local"
        - "jaeger.enterprise.local"
        - "vault.enterprise.local"
    # Restrict other external access
    - hosts:
        - "kubernetes.default.svc.cluster.local"
      port:
        number: 443
        protocol: HTTPS

---
apiVersion: networking.istio.io/v1beta1
kind: WorkloadEntry
metadata:
  name: aquaculture-enterprise-database
  namespace: aquaculture-platform
  labels:
    app.kubernetes.io/name: aquaculture-platform
    app.kubernetes.io/component: database
    enterprise.data/tier: "critical"
  annotations:
    enterprise.istio.io/description: "Enterprise database workload entry"
    enterprise.istio.io/data-classification: "confidential"
spec:
  address: postgres.enterprise.local
  ports:
    postgres: 5432
  labels:
    app: enterprise-database
    version: v1
    tier: data
    security-level: high

---
apiVersion: networking.istio.io/v1beta1
kind: WorkloadEntry
metadata:
  name: aquaculture-enterprise-sqlserver
  namespace: aquaculture-platform
  labels:
    app.kubernetes.io/name: aquaculture-platform
    app.kubernetes.io/component: sqlserver
    enterprise.data/tier: "critical"
spec:
  address: sqlserver.enterprise.local
  ports:
    sqlserver: 1433
  labels:
    app: enterprise-sqlserver
    version: v1
    tier: data
    security-level: high

---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: aquaculture-enterprise-security-headers
  namespace: aquaculture-platform
  labels:
    app.kubernetes.io/name: aquaculture-platform
    app.kubernetes.io/component: envoy-filter
    enterprise.security/headers: "enabled"
  annotations:
    enterprise.istio.io/description: "Enterprise security headers injection"
    enterprise.istio.io/security-policy: "strict"
spec:
  workloadSelector:
    labels:
      app: aquaculture-platform
  
  configPatches:
    # Add enterprise security headers
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.local_ratelimit
          typed_config:
            "@type": type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
            value:
              stat_prefix: enterprise_rate_limiter
              token_bucket:
                max_tokens: 1000
                tokens_per_fill: 100
                fill_interval: 1s
              filter_enabled:
                runtime_key: enterprise_rate_limit_enabled
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              filter_enforced:
                runtime_key: enterprise_rate_limit_enforced
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              response_headers_to_add:
                - append: false
                  header:
                    key: x-enterprise-rate-limit
                    value: "applied"
    
    # Add enterprise audit logging
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.wasm
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
            config:
              name: "enterprise_audit_logger"
              root_id: "enterprise_audit_logger"
              vm_config:
                vm_id: "enterprise_audit_logger"
                runtime: "envoy.wasm.runtime.v8"
                code:
                  local:
                    inline_string: |
                      class EnterpriseAuditLogger {
                        constructor(rootContext) {
                          this.rootContext = rootContext;
                        }
                        
                        onRequestHeaders() {
                          const headers = this.getRequestHeaders();
                          const auditLog = {
                            timestamp: new Date().toISOString(),
                            method: headers[':method'],
                            path: headers[':path'],
                            user_agent: headers['user-agent'],
                            x_forwarded_for: headers['x-forwarded-for'],
                            enterprise_mode: headers['x-enterprise-mode'],
                            compliance_required: true
                          };
                          
                          console.log('ENTERPRISE_AUDIT:', JSON.stringify(auditLog));
                          return FilterHeadersStatus.Continue;
                        }
                      }

---
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: aquaculture-enterprise-control-plane
  namespace: istio-system
  labels:
    app.kubernetes.io/name: istio
    app.kubernetes.io/component: control-plane
    enterprise.istio/profile: "enterprise"
  annotations:
    enterprise.istio.io/description: "Enterprise Istio control plane configuration"
    enterprise.istio.io/security-level: "high"
    enterprise.istio.io/compliance: "sox-gdpr-pci"
spec:
  # Enterprise Istio configuration
  values:
    global:
      # Enterprise mesh configuration
      meshID: aquaculture-enterprise
      multiCluster:
        clusterName: aquaculture-production
      network: enterprise-network
      
      # Enterprise security configuration
      jwtPolicy: third-party-jwt
      
      # Enterprise proxy configuration
      proxy:
        # Enterprise resource limits
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 2000m
            memory: 1Gi
        
        # Enterprise logging configuration
        logLevel: "info"
        componentLogLevel: "misc:error"
        
        # Enterprise tracing configuration
        tracer: "jaeger"
        
        # Enterprise metrics configuration
        envoyMetricsService:
          address: prometheus.enterprise.local:9090
        
        # Enterprise access logging
        envoyAccessLogService:
          address: enterprise-access-log.istio-system:9000
      
      # Enterprise pilot configuration
      pilot:
        env:
          EXTERNAL_ISTIOD: false
          PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION: true
          PILOT_ENABLE_CROSS_CLUSTER_WORKLOAD_ENTRY: true
          PILOT_TRACE_SAMPLING: 1.0
          PILOT_ENABLE_STATUS: true
          PILOT_ENABLE_ENTERPRISE_FEATURES: true
      
      # Enterprise proxy init configuration
      proxy_init:
        resources:
          limits:
            cpu: 2000m
            memory: 1Gi
          requests:
            cpu: 10m
            memory: 10Mi
  
  components:
    # Enterprise Pilot configuration
    pilot:
      k8s:
        env:
          - name: PILOT_ENABLE_ENTERPRISE_SECURITY
            value: "true"
          - name: PILOT_ENABLE_COMPLIANCE_LOGGING
            value: "true"
          - name: PILOT_ENTERPRISE_AUDIT_LOG
            value: "/var/log/istio/enterprise-audit.log"
        
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 4000m
            memory: 8Gi
        
        # Enterprise high availability
        hpaSpec:
          minReplicas: 3
          maxReplicas: 10
          metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: 70
        
        # Enterprise security context
        securityContext:
          runAsUser: 1337
          runAsGroup: 1337
          runAsNonRoot: true
          fsGroup: 1337
    
    # Enterprise Ingress Gateway
    ingressGateways:
      - name: istio-ingressgateway-enterprise
        enabled: true
        label:
          istio: ingressgateway-enterprise
          enterprise: "true"
        
        k8s:
          env:
            - name: ISTIO_META_ROUTER_MODE
              value: "sni-dnat"
            - name: PILOT_ENABLE_ENTERPRISE_GATEWAY
              value: "true"
          
          resources:
            requests:
              cpu: 1000m
              memory: 1Gi
            limits:
              cpu: 4000m
              memory: 4Gi
          
          # Enterprise high availability
          hpaSpec:
            minReplicas: 3
            maxReplicas: 10
            metrics:
              - type: Resource
                resource:
                  name: cpu
                  target:
                    type: Utilization
                    averageUtilization: 70
          
          service:
            type: LoadBalancer
            ports:
              - port: 15021
                targetPort: 15021
                name: status-port
                protocol: TCP
              - port: 80
                targetPort: 8080
                name: http2
                protocol: TCP
              - port: 443
                targetPort: 8443
                name: https
                protocol: TCP
              - port: 8443
                targetPort: 8443
                name: https-enterprise
                protocol: TCP
            
            annotations:
              service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
              service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:123456789012:certificate/enterprise-cert"
              service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443,8443"
              service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
              external-dns.alpha.kubernetes.io/hostname: "aquaculture.enterprise.local"
    
    # Enterprise Egress Gateway
    egressGateways:
      - name: istio-egressgateway-enterprise
        enabled: true
        label:
          istio: egressgateway-enterprise
          enterprise: "true"
        
        k8s:
          env:
            - name: ISTIO_META_ROUTER_MODE
              value: "sni-dnat"
            - name: PILOT_ENABLE_ENTERPRISE_EGRESS
              value: "true"
          
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 2000m
              memory: 2Gi
          
          # Enterprise egress monitoring
          service:
            type: ClusterIP
            ports:
              - port: 80
                name: http2
                protocol: TCP
              - port: 443
                name: https
                protocol: TCP
              - port: 15443
                name: tls
                protocol: TCP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: enterprise-istio-config
  namespace: istio-system
  labels:
    app.kubernetes.io/name: istio
    app.kubernetes.io/component: config
    enterprise.istio/config: "true"
  annotations:
    enterprise.istio.io/description: "Enterprise Istio configuration parameters"
data:
  # Enterprise mesh configuration
  mesh: |
    # Enterprise default configuration
    defaultConfig:
      # Enterprise proxy configuration
      proxyStatsMatcher:
        inclusionRegexps:
          - ".*outlier_detection.*"
          - ".*circuit_breakers.*"
          - ".*upstream_rq_retry.*"
          - ".*upstream_rq_pending.*"
          - ".*_cx_.*"
        exclusionRegexps:
          - ".*osconfig.*"
      
      # Enterprise tracing configuration
      tracing:
        jaeger:
          address: jaeger-collector.istio-system:14268
        sampling: 100.0
        custom_tags:
          enterprise_mode:
            literal:
              value: "true"
          compliance_required:
            literal:
              value: "sox-gdpr"
      
      # Enterprise discovery configuration
      discoveryAddress: istiod.istio-system.svc:15010
      
      # Enterprise proxy metadata
      proxyMetadata:
        PILOT_ENABLE_ENTERPRISE_FEATURES: "true"
        BOOTSTRAP_XDS_AGENT: "true"
        XDS_AUTH: "true"
        CA_ADDR: "istiod.istio-system.svc:15012"
    
    # Enterprise access logging configuration
    extensionProviders:
      - name: enterprise-access-log
        envoyFileAccessLog:
          path: "/var/log/istio/enterprise-access.log"
          format: |
            {
              "timestamp": "%START_TIME%",
              "method": "%REQ(:METHOD)%",
              "path": "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%",
              "protocol": "%PROTOCOL%",
              "response_code": "%RESPONSE_CODE%",
              "response_flags": "%RESPONSE_FLAGS%",
              "bytes_received": "%BYTES_RECEIVED%",
              "bytes_sent": "%BYTES_SENT%",
              "duration": "%DURATION%",
              "upstream_service_time": "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%",
              "x_forwarded_for": "%REQ(X-FORWARDED-FOR)%",
              "user_agent": "%REQ(USER-AGENT)%",
              "request_id": "%REQ(X-REQUEST-ID)%",
              "authority": "%REQ(:AUTHORITY)%",
              "upstream_host": "%UPSTREAM_HOST%",
              "enterprise_mode": "%REQ(X-ENTERPRISE-MODE)%",
              "compliance_audit": "required",
              "user_id": "%REQ(X-USER-ID)%",
              "session_id": "%REQ(X-SESSION-ID)%"
            }
      
      - name: prometheus-enterprise
        prometheus:
          configOverride:
            metric_relabeling_configs:
              - source_labels: [__name__]
                regex: "istio_.*"
                target_label: "enterprise_metric"
                replacement: "true"
      
      - name: jaeger-enterprise
        jaeger:
          address: "jaeger-collector.istio-system:14268"
          max_tag_length: 256
    
    # Enterprise default providers
    defaultProviders:
      accessLogging:
        - enterprise-access-log
      metrics:
        - prometheus-enterprise
      tracing:
        - jaeger-enterprise

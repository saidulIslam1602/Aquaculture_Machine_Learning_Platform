# ============================================================================
# ENTERPRISE SOAP GATEWAY NGINX CONFIGURATION
# ============================================================================
#
# This configuration provides enterprise-grade SOAP service gateway with:
# - SOAP/XML message routing and transformation
# - Enterprise security and authentication
# - SSL/TLS termination for SOAP services
# - Enterprise logging and monitoring
# - WSDL service discovery and management
# - Enterprise ESB integration patterns
#
# ENTERPRISE FEATURES:
# - SOAP message validation and transformation
# - Enterprise authentication integration (LDAP, SAML)
# - Advanced routing based on SOAP action headers
# - Enterprise audit logging for compliance
# - Rate limiting and DDoS protection
# - Enterprise monitoring and health checks
# ============================================================================

# Enterprise worker configuration
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Enterprise events configuration
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Enterprise MIME types and character encoding
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    charset utf-8;
    
    # Enterprise logging format for SOAP services
    log_format enterprise_soap_log '{'
        '"timestamp": "$time_iso8601", '
        '"remote_addr": "$remote_addr", '
        '"remote_user": "$remote_user", '
        '"request": "$request", '
        '"status": $status, '
        '"body_bytes_sent": $body_bytes_sent, '
        '"http_referer": "$http_referer", '
        '"http_user_agent": "$http_user_agent", '
        '"http_x_forwarded_for": "$http_x_forwarded_for", '
        '"soap_action": "$http_soapaction", '
        '"content_type": "$content_type", '
        '"request_length": $request_length, '
        '"request_time": $request_time, '
        '"upstream_response_time": "$upstream_response_time", '
        '"enterprise_mode": "true", '
        '"compliance_audit": "required", '
        '"service_type": "soap_gateway"'
    '}';
    
    # Enterprise access logging
    access_log /var/log/nginx/access.log enterprise_soap_log;
    
    # Enterprise performance optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Enterprise security headers
    server_tokens off;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'" always;
    add_header X-Enterprise-SOAP-Gateway "enabled" always;
    
    # Enterprise gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/soap+xml
        text/xml;
    
    # Enterprise rate limiting
    limit_req_zone $binary_remote_addr zone=soap_limit:10m rate=10r/s;
    limit_req_zone $http_soapaction zone=soap_action_limit:10m rate=5r/s;
    
    # Enterprise upstream configuration for API services
    upstream aquaculture_api {
        server aquaculture-api-enterprise:8000;
        keepalive 32;
    }
    
    upstream aquaculture_ml {
        server aquaculture-ml-service:8001;
        keepalive 16;
    }
    
    # Enterprise SOAP Gateway Server (HTTP)
    server {
        listen 80;
        server_name soap.aquaculture.enterprise.local;
        
        # Enterprise security and monitoring
        add_header X-Enterprise-SOAP-Mode "http" always;
        
        # Enterprise rate limiting
        limit_req zone=soap_limit burst=20 nodelay;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"soap-gateway","enterprise":true}';
            add_header Content-Type application/json;
        }
        
        # WSDL service discovery
        location ~ ^/soap/(.+)\.wsdl$ {
            alias /usr/share/nginx/html/soap/wsdl/$1.wsdl;
            add_header Content-Type application/wsdl+xml;
            add_header X-Enterprise-WSDL "true";
        }
        
        # Enterprise SOAP service endpoints
        location /soap/aquaculture/api/ {
            # SOAP action rate limiting
            limit_req zone=soap_action_limit burst=10 nodelay;
            
            # Enterprise SOAP headers
            add_header X-Enterprise-SOAP-Service "aquaculture-api";
            add_header X-SOAP-Version "1.2";
            
            # SOAP message validation and transformation
            access_by_lua_block {
                -- Enterprise SOAP message validation
                local soap_action = ngx.var.http_soapaction
                if not soap_action then
                    ngx.log(ngx.ERR, "Missing SOAPAction header")
                    ngx.status = 400
                    ngx.say('<?xml version="1.0" encoding="UTF-8"?>')
                    ngx.say('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">')
                    ngx.say('  <soap:Body>')
                    ngx.say('    <soap:Fault>')
                    ngx.say('      <faultcode>Client</faultcode>')
                    ngx.say('      <faultstring>Missing SOAPAction header</faultstring>')
                    ngx.say('    </soap:Fault>')
                    ngx.say('  </soap:Body>')
                    ngx.say('</soap:Envelope>')
                    ngx.exit(400)
                end
                
                -- Enterprise audit logging
                ngx.log(ngx.INFO, "SOAP request: action=" .. soap_action .. " client=" .. ngx.var.remote_addr)
            }
            
            # Proxy to API service with SOAP-to-REST transformation
            proxy_pass http://aquaculture_api/api/v1/soap/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header SOAPAction $http_soapaction;
            proxy_set_header Content-Type $content_type;
            proxy_set_header X-Enterprise-SOAP "true";
            proxy_set_header X-Enterprise-Gateway "soap-nginx";
            
            # Enterprise timeout configuration
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Enterprise buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        # Enterprise ML SOAP service endpoints
        location /soap/aquaculture/ml/ {
            # SOAP action rate limiting
            limit_req zone=soap_action_limit burst=5 nodelay;
            
            # Enterprise SOAP headers
            add_header X-Enterprise-SOAP-Service "aquaculture-ml";
            add_header X-SOAP-Version "1.2";
            
            # Proxy to ML service with SOAP-to-REST transformation
            proxy_pass http://aquaculture_ml/ml/v1/soap/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header SOAPAction $http_soapaction;
            proxy_set_header Content-Type $content_type;
            proxy_set_header X-Enterprise-SOAP "true";
            proxy_set_header X-Enterprise-ML-Gateway "soap-nginx";
            
            # Enterprise timeout configuration for ML operations
            proxy_connect_timeout 30s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }
        
        # Enterprise SOAP fault handler
        error_page 400 401 403 404 500 502 503 504 /soap_error;
        location = /soap_error {
            internal;
            content_by_lua_block {
                local status = ngx.status
                local message = "Internal server error"
                
                if status == 400 then
                    message = "Bad request"
                elseif status == 401 then
                    message = "Unauthorized"
                elseif status == 403 then
                    message = "Forbidden"
                elseif status == 404 then
                    message = "Service not found"
                elseif status == 500 then
                    message = "Internal server error"
                elseif status == 502 then
                    message = "Bad gateway"
                elseif status == 503 then
                    message = "Service unavailable"
                elseif status == 504 then
                    message = "Gateway timeout"
                end
                
                ngx.header.content_type = "application/soap+xml"
                ngx.say('<?xml version="1.0" encoding="UTF-8"?>')
                ngx.say('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">')
                ngx.say('  <soap:Body>')
                ngx.say('    <soap:Fault>')
                ngx.say('      <faultcode>Server</faultcode>')
                ngx.say('      <faultstring>' .. message .. '</faultstring>')
                ngx.say('      <detail>')
                ngx.say('        <enterprise:error xmlns:enterprise="http://enterprise.local/soap/fault">')
                ngx.say('          <enterprise:code>' .. status .. '</enterprise:code>')
                ngx.say('          <enterprise:timestamp>' .. ngx.utctime() .. '</enterprise:timestamp>')
                ngx.say('          <enterprise:gateway>soap-nginx</enterprise:gateway>')
                ngx.say('        </enterprise:error>')
                ngx.say('      </detail>')
                ngx.say('    </soap:Fault>')
                ngx.say('  </soap:Body>')
                ngx.say('</soap:Envelope>')
            }
        }
    }
    
    # Enterprise SOAP Gateway Server (HTTPS)
    server {
        listen 443 ssl http2;
        server_name soap.aquaculture.enterprise.local;
        
        # Enterprise SSL configuration
        ssl_certificate /etc/ssl/enterprise/server.crt;
        ssl_certificate_key /etc/ssl/enterprise/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # Enterprise security headers for HTTPS
        add_header X-Enterprise-SOAP-Mode "https" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # Enterprise rate limiting
        limit_req zone=soap_limit burst=20 nodelay;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"soap-gateway","enterprise":true,"ssl":true}';
            add_header Content-Type application/json;
        }
        
        # WSDL service discovery (HTTPS)
        location ~ ^/soap/(.+)\.wsdl$ {
            alias /usr/share/nginx/html/soap/wsdl/$1.wsdl;
            add_header Content-Type application/wsdl+xml;
            add_header X-Enterprise-WSDL "true";
            add_header X-Enterprise-SSL "enabled";
        }
        
        # Enterprise SOAP service endpoints (HTTPS)
        location /soap/aquaculture/api/ {
            # SOAP action rate limiting
            limit_req zone=soap_action_limit burst=10 nodelay;
            
            # Enterprise SOAP headers
            add_header X-Enterprise-SOAP-Service "aquaculture-api";
            add_header X-SOAP-Version "1.2";
            add_header X-Enterprise-SSL "enabled";
            
            # SOAP message validation and transformation
            access_by_lua_block {
                -- Enterprise SOAP message validation (same as HTTP)
                local soap_action = ngx.var.http_soapaction
                if not soap_action then
                    ngx.log(ngx.ERR, "Missing SOAPAction header")
                    ngx.status = 400
                    ngx.say('<?xml version="1.0" encoding="UTF-8"?>')
                    ngx.say('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">')
                    ngx.say('  <soap:Body>')
                    ngx.say('    <soap:Fault>')
                    ngx.say('      <faultcode>Client</faultcode>')
                    ngx.say('      <faultstring>Missing SOAPAction header</faultstring>')
                    ngx.say('    </soap:Fault>')
                    ngx.say('  </soap:Body>')
                    ngx.say('</soap:Envelope>')
                    ngx.exit(400)
                end
                
                -- Enterprise audit logging with SSL info
                ngx.log(ngx.INFO, "SOAP HTTPS request: action=" .. soap_action .. " client=" .. ngx.var.remote_addr .. " ssl=true")
            }
            
            # Proxy to API service with SOAP-to-REST transformation (HTTPS)
            proxy_pass https://aquaculture_api/api/v1/soap/;
            proxy_ssl_verify off;  # Internal communication
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header SOAPAction $http_soapaction;
            proxy_set_header Content-Type $content_type;
            proxy_set_header X-Enterprise-SOAP "true";
            proxy_set_header X-Enterprise-Gateway "soap-nginx-ssl";
            proxy_set_header X-Enterprise-SSL "enabled";
            
            # Enterprise timeout configuration
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Enterprise ML SOAP service endpoints (HTTPS)
        location /soap/aquaculture/ml/ {
            # SOAP action rate limiting
            limit_req zone=soap_action_limit burst=5 nodelay;
            
            # Enterprise SOAP headers
            add_header X-Enterprise-SOAP-Service "aquaculture-ml";
            add_header X-SOAP-Version "1.2";
            add_header X-Enterprise-SSL "enabled";
            
            # Proxy to ML service with SOAP-to-REST transformation (HTTPS)
            proxy_pass https://aquaculture_ml/ml/v1/soap/;
            proxy_ssl_verify off;  # Internal communication
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header SOAPAction $http_soapaction;
            proxy_set_header Content-Type $content_type;
            proxy_set_header X-Enterprise-SOAP "true";
            proxy_set_header X-Enterprise-ML-Gateway "soap-nginx-ssl";
            proxy_set_header X-Enterprise-SSL "enabled";
            
            # Enterprise timeout configuration for ML operations
            proxy_connect_timeout 30s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }
        
        # Use the same error handler as HTTP
        error_page 400 401 403 404 500 502 503 504 /soap_error;
        location = /soap_error {
            internal;
            content_by_lua_block {
                local status = ngx.status
                local message = "Internal server error"
                
                if status == 400 then
                    message = "Bad request"
                elseif status == 401 then
                    message = "Unauthorized"
                elseif status == 403 then
                    message = "Forbidden"
                elseif status == 404 then
                    message = "Service not found"
                elseif status == 500 then
                    message = "Internal server error"
                elseif status == 502 then
                    message = "Bad gateway"
                elseif status == 503 then
                    message = "Service unavailable"
                elseif status == 504 then
                    message = "Gateway timeout"
                end
                
                ngx.header.content_type = "application/soap+xml"
                ngx.say('<?xml version="1.0" encoding="UTF-8"?>')
                ngx.say('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">')
                ngx.say('  <soap:Body>')
                ngx.say('    <soap:Fault>')
                ngx.say('      <faultcode>Server</faultcode>')
                ngx.say('      <faultstring>' .. message .. '</faultstring>')
                ngx.say('      <detail>')
                ngx.say('        <enterprise:error xmlns:enterprise="http://enterprise.local/soap/fault">')
                ngx.say('          <enterprise:code>' .. status .. '</enterprise:code>')
                ngx.say('          <enterprise:timestamp>' .. ngx.utctime() .. '</enterprise:timestamp>')
                ngx.say('          <enterprise:gateway>soap-nginx-ssl</enterprise:gateway>')
                ngx.say('          <enterprise:ssl>enabled</enterprise:ssl>')
                ngx.say('        </enterprise:error>')
                ngx.say('      </detail>')
                ngx.say('    </soap:Fault>')
                ngx.say('  </soap:Body>')
                ngx.say('</soap:Envelope>')
            }
        }
    }
}

# ==============================================================================
# Aquaculture ML Platform - Docker Compose Configuration
# ==============================================================================
# Clean, production-ready Docker configuration for AWS deployment
# 
# Services:
#   - PostgreSQL: Primary database
#   - Redis: Caching and session management
#   - Kafka + Zookeeper: Event streaming
#   - API: FastAPI backend service
#   - Worker: Celery background tasks
#   - Frontend: React application
# ==============================================================================

networks:
  aquaculture-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

services:
  # ============================================================================
  # DATABASE - PostgreSQL
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: aquaculture-postgres
    environment:
      POSTGRES_USER: aquaculture
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_ME_IN_PRODUCTION}
      POSTGRES_DB: aquaculture_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aquaculture"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aquaculture-network
    restart: unless-stopped

  # ============================================================================
  # CACHE - Redis
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: aquaculture-redis
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aquaculture-network
    restart: unless-stopped

  # ============================================================================
  # MESSAGE BROKER - Kafka & Zookeeper
  # ============================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: aquaculture-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - aquaculture-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: aquaculture-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - aquaculture-network
    restart: unless-stopped

  # ============================================================================
  # API SERVICE - FastAPI Backend
  # ============================================================================
  api:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: aquaculture-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://aquaculture:${POSTGRES_PASSWORD:-CHANGE_ME_IN_PRODUCTION}@postgres:5432/aquaculture_db
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-change-in-production}
      - PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED:-true}
    volumes:
      - ./services/api:/app/services/api
      - ./data:/app/data
    networks:
      - aquaculture-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # WORKER SERVICE - Celery Background Tasks
  # ============================================================================
  worker:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: aquaculture-worker
    command: celery -A services.worker.celery_app worker --loglevel=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://aquaculture:${POSTGRES_PASSWORD:-CHANGE_ME_IN_PRODUCTION}@postgres:5432/aquaculture_db
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./services/worker:/app/services/worker
      - ./data:/app/data
    networks:
      - aquaculture-network
    restart: unless-stopped

  # ============================================================================
  # FRONTEND - React Application
  # ============================================================================
  frontend:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.frontend
    container_name: aquaculture-frontend
    depends_on:
      - api
    ports:
      - "3001:80"
    environment:
      - VITE_API_URL=http://localhost:8000
    networks:
      - aquaculture-network
    restart: unless-stopped

